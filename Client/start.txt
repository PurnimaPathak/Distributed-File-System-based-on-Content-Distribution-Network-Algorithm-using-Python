import os
import socket


def read_config(url="./dfc.conf"):
    conf_file = open(url)
    conf = {'SERVER': []}
    for line in conf_file.readlines():
        if "Server" in line.split():
            address = line.split()[2].strip().split(":")
            conf['SERVER'].append((address[0], int(address[1])))
        if 'MAX_REQUEST_LEN' in line.split():
            conf['MAX_REQUEST_LEN'] = line.split()[1].strip()
        if 'Username' in line:
            conf['Username'] = line.split(":")[1].strip()
        if 'Password' in line:
            conf['Password'] = line.split(":")[1].strip()
        if 'MAX_REQUEST_LEN' in line:
            conf['MAX_REQUEST_LEN'] = int(line.split()[1].strip())
    return conf


def PUT(conf, filename):
    """
    (1,2)(2,3)(3,4)(4,1)
    (4,1)(1,2)(2,3)(3,4)

    x ??  MD5hash(filename) % 4 >> 0,1,2,3
    :param conf:
    :param filename:
    :return:
    """
    with open(filename, 'rb') as file:
        lines = file.readlines()
        num_lines = len(lines)
        limit = int(num_lines / 4)

        send_part_file(lines[:limit], conf['SERVER'][3], "{}_{}".format(filename, "part1"))  # purnima.txt => purnima.txt_part1
        send_part_file(lines[:limit], conf['SERVER'][0], "{}_{}".format(filename, "part1"))

        start = limit
        limit *= 2
        send_part_file(lines[start:limit], conf['SERVER'][0], "{}_{}".format(filename, "part2"))
        send_part_file(lines[start:limit], conf['SERVER'][1], "{}_{}".format(filename, "part2"))

        start = limit
        limit += int(num_lines / 4)
        send_part_file(lines[start:limit], conf['SERVER'][1], "{}_{}".format(filename, "part3"))
        send_part_file(lines[start:limit], conf['SERVER'][2], "{}_{}".format(filename, "part3"))

        start = limit
        send_part_file(lines[start:], conf['SERVER'][2], "{}_{}".format(filename, "part4"))
        send_part_file(lines[start:], conf['SERVER'][3], "{}_{}".format(filename, "part4"))


def send_part_file(lines, host_address, filename):
    try:
        s_socket = socket.socket()
        s_socket.connect(host_address)
        s_socket.send("PUT {}".format(filename).encode())
        for line in lines:
            s_socket.send(line)
    except Exception as e:
        print("Error: {}".format(e))
    finally:
        s_socket.close()


def get_part(server1, filename):
    part = None
    try:
        server_sock = socket.socket()
        server_sock.connect(server1)
        server_sock.send("GET {}".format(filename).encode())
        data = server_sock.recv(1024)
        part = data
        while data:
            data = server_sock.recv(1024)  # (self.config['MAX_REQUEST_LEN'])
            part += data
        server_sock.close()
    except Exception as e:
        print("Error: {}".format(e))
    return part


def get_part_file(server1, server2, filename):
    """

    :param server_sock:
    :param server1:
    :param server2:
    :param filename:
    :return:
    """
    part = get_part(server1, filename)
    if not part:
        part = get_part(server2, filename)
    return part


def GET(conf, file_name):
    """

    :param conf:
    :param server_sock:
    :param file_name:
    :return:
    """
    part1 = get_part_file(conf['SERVER'][3], conf['SERVER'][0], "{}_part{}".format(file_name, str(1)))
    file_name, file_data = concat_part(file_name, part1)

    part2 = get_part_file(conf['SERVER'][0], conf['SERVER'][1], "{}_part{}".format(file_name, str(2)))
    file_name, file_data = concat_part(file_name, part2)

    part3 = get_part_file(conf['SERVER'][1], conf['SERVER'][2], "{}_part{}".format(file_name, str(3)))
    file_name, file_data = concat_part(file_name, part3)

    part4 = get_part_file(conf['SERVER'][2], conf['SERVER'][3], "{}_part{}".format(file_name, str(4)))
    file_name, file_data = concat_part(file_name, part4)

    if None in [part1, part2, part3, part4]:
        print("File is incomplete.")
    file = open(file_name, 'wb')
    file.write(file_data)
    file.close()


def concat_part(file_name, part1):
    """

    :param file_name:
    :param part1:
    :return:
    """
    file_data = None
    if part1:
        file_data = part1
    else:
        file_name += ' [incomplete]' if 'incomplete' not in file_name else ''
    return file_name, file_data


def get_list(server_address, server_sock):
    try:
        server_sock.connect(server_address)
        server_sock.send("LIST".encode('utf-8'))
        data = server_sock.recv()
        return data.decode().split() 
    except Exception as e:
        print("Error: {}".format(e))
        return None


def create_final_list(list_data):
    """
    list_data = {serv1: [1_1, 1_2, 2, 3, 4]
                 #serv2: [1_2, 1_3]
                 #serv3: [1_3, 1_4]
                 serv4: [1_4, 1_1]
                }
    :param list_data:
    :return:
    """
    file_list = {}  # {1:[0, 1]}
    for i in range(list_data):
        for j in range(len(list_data[i])):
            if file_list[list_data[i][j]] not in file_list.keys():
                file_list[list_data[i][j]] = [i, i+1] if i < len(list_data) else [i]
            for k in range(i + 1, len(list_data)):
                if list_data[i][j] in list_data[k]:
                    file_list[list_data[i][j]].extend([k, k+1] if k < len(list_data) else [k])
    fin_list = []
    for key, value in file_list:
        if len(set(value)) < 4:
            fin_list.append("{} [incomplete]".format(key))
        else:
            fin_list.append(key)
    return fin_list


def LIST(conf, server_sock):
    """
    conf = {"SERVER": [(ip, port), (ip2, port2), ...}

    :param conf:
    :param server_sock:
    :return:
    """
    list_data = []
    for server_add in conf["SERVER"]:
        list_data.append(get_list(server_add, server_sock))
    final_list = create_final_list(list_data)
    print("\n".join(final_list))


def main():
    """

    :return:
    """
    conf = read_config()
    while True:
        # Check: input or raw input needs to be debugged
        command = input()
        method = command.split()[0] # GET 1.txt, PUT 1.txt, LIST
        if method not in ["GET", "PUT", "LIST"]:
            print("Wrong method. Please try again with method name as GET, PUT or LIST")
        if method == "PUT":
            if os.path.exists(command.split()[1]):  # TODO if folder name provided without filename
                PUT(conf, command.split()[1])
        # TODO: implement LIST
        if method == "GET":
            GET(conf, command.split()[1])
        if method == "LIST":
            LIST(conf)


if __name__ == "__main__":
    try:
        main()
    except Exception as e:
        print(e)
